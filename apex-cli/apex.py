#!/usr/bin/env python3
# apex.py

import shutil
import typer
from typing import List, Optional
import os
import sys
import json
import logging
import textwrap
from apex_mind_core.core.orchestrator import Orchestrator
from apex_mind_core.core.wasi_bridge import WASIGuard, HardwareOp, HardwareOpType
import sys

sys.path.append("C:/Users/danil/Desktop/apex-mind-core_v0.1")
orchestrator = Orchestrator()
app = typer.Typer()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
class GlobalContext:
    def __init__(self):
        self.log_level = "info"
        self.manifest = None
        self.dry_run = False
        self.config_path = os.path.expanduser("~/.apex/config.json")
        self.log_path = os.path.expanduser("~/.apex/logs/apex.log")
        self.config = {}
        self.load_config()

    def load_config(self):
        try:
            if os.path.exists(self.config_path):
                with open(self.config_path, 'r') as f:
                    self.config = json.load(f)
                self.log_level = self.config.get("log_level", "info")
                self.manifest = self.config.get("default_manifest")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            self.config = {}

    def save_config(self):
        os.makedirs(os.path.dirname(self.config_path), exist_ok=True)
        with open(self.config_path, 'w') as f:
            json.dump(self.config, f, indent=2)

def show_full_help():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é —Å–ø—Ä–∞–≤–∫—É –∏–∑ README.md"""
    try:
        base_dir = os.path.dirname(os.path.abspath(__file__))
        readme_path = os.path.join(base_dir, 'README.md')
        
        if not os.path.exists(readme_path):
            typer.echo("–§–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        with open(readme_path, 'r', encoding='utf-8') as f:
            content = f.read()
            typer.echo(content)
    except Exception as e:
        typer.echo(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}", err=True)

def show_quick_help():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
    üöÄ Apex CLI v0.1 - –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á

    –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
      execute    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á
      validate   –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
      config     –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Å–∏—Å—Ç–µ–º—ã
      manifest   –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      system     –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

    –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:
      --version         –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é
      --log-level LEVEL –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (debug/info/warning/error)
      --manifest PATH   –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∞–π–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      --dry-run         –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      --help            –ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞
      --full-help       –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

    –ü—Ä–∏–º–µ—Ä—ã:
      apex execute "–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª.txt"
      apex validate "–ó–∞–ø–∏—Å–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ñ–∞–π–ª"
      apex config set log_level debug

    –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ:
      apex <–∫–æ–º–∞–Ω–¥–∞> --help
      apex --full-help –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    """
    typer.echo(textwrap.dedent(help_text).strip())

# Callback –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π
@app.callback(invoke_without_command=True)
def main(
    ctx: typer.Context,
    version: bool = typer.Option(
         False, "--version", help="–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é", is_eager=True
     ),
     full_help: bool = typer.Option(
         False, "--full-help", help="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é", is_eager=True
     ),
    log_level: str = typer.Option(None, "--log-level", help="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (debug/info/warning/error)"),
    manifest: str = typer.Option(None, "--manifest", help="–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∞–π–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"),
    dry_run: bool = typer.Option(False, "--dry-run", help="–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"),
    help: bool = typer.Option(
         False, "--help", "-h", help="–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É", is_eager=True
     ),
):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–ø—Ä–∞–≤–∫–∏
    if help or (not any([version, full_help, log_level, manifest, dry_run]) and ctx.invoked_subcommand is None):
        show_quick_help()
        raise typer.Exit()
    
    if version:
        typer.echo("Apex CLI v0.1")
        raise typer.Exit()
    
    if full_help:
        show_full_help()
        raise typer.Exit()
    
    ctx.obj = GlobalContext()
    
    if log_level:
        ctx.obj.log_level = log_level.lower()
    
    if manifest:
        ctx.obj.manifest = manifest
    
    if dry_run:
        ctx.obj.dry_run = True
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_levels = {
        "debug": logging.DEBUG,
        "info": logging.INFO,
        "warning": logging.WARNING,
        "error": logging.ERROR
    }
    logging.basicConfig(
        level=log_levels.get(ctx.obj.log_level, logging.INFO),
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            logging.FileHandler(ctx.obj.log_path),
            logging.StreamHandler()
        ]
    )

# –ö–æ–º–∞–Ω–¥–∞ execute
@app.command()
def execute(
    ctx: typer.Context,
    task: Optional[str] = typer.Argument(None, help="–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏"),
    output: Optional[str] = typer.Option(None, "--output", help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª"),
    input: Optional[str] = typer.Option(None, "--input", help="–ü—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–¥–∞—á—É –∏–∑ —Ñ–∞–π–ª–∞"),
):
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    
    –ü—Ä–∏–º–µ—Ä—ã:
      apex execute "–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª.txt"
      apex execute "–ó–∞–ø–∏—Å–∞—Ç—å –≤ log.txt '—Ç–µ–∫—Å—Ç'" --output result.txt
      apex execute --input task.txt
    """
    if input:
        try:
            with open(input, 'r', encoding='utf-8') as f:
                task_text = f.read()
        except Exception as e:
            typer.echo(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}", err=True)
            raise typer.Exit(code=1)
    elif task:
        task_text = task
    else:
        typer.echo("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∑–∞–¥–∞—á–∞!", err=True)
        raise typer.Exit(code=1)
    
    if ctx.obj.dry_run:
        typer.echo(f"[DRY-RUN] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {task_text}")
        if output:
            typer.echo(f"[DRY-RUN] –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output}")
        return
    
    try:
        result = orchestrator.executor({
            "current_step": "WebSearch",
            "mission": task_text
        })
        
        if output:
            with open(output, 'w', encoding='utf-8') as f:
                f.write(str(result))
            typer.echo(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output}")
        else:
            typer.echo(result)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        typer.echo(f"‚ùå [ERROR] {e}", err=True)
        raise typer.Exit(code=2)

# –ö–æ–º–∞–Ω–¥–∞ validate
@app.command()
def validate(
    ctx: typer.Context,
    task: str = typer.Argument(..., help="–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"),
):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
    
    –ü—Ä–∏–º–µ—Ä—ã:
      apex validate "–ü—Ä–æ—á–∏—Ç–∞—Ç—å C:\Windows\system.ini"
      apex validate "–ó–∞–ø–∏—Å–∞—Ç—å –≤ C:\Temp\test.txt 'hello'"
    """
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã
        state = {"mission": task}
        state = orchestrator.mission_parser(state)
        parsed = state["parsed_command"]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        if parsed["target"] == "file":
            path = parsed["path"]
            guard = WASIGuard(ctx.obj.manifest or "manifests/default.json")
            if parsed["action"] == "read":
                if guard.file_ops._check_permission("read", path):
                    typer.echo("üü¢ [SECURITY] –û–ø–µ—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞")
                else:
                    typer.echo(f"üî¥ [SECURITY] –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞: —á—Ç–µ–Ω–∏–µ {path}")
            elif parsed["action"] == "write":
                if guard.file_ops._check_permission("write", path):
                    typer.echo("üü¢ [SECURITY] –û–ø–µ—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞")
                else:
                    typer.echo(f"üî¥ [SECURITY] –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞: –∑–∞–ø–∏—Å—å –≤ {path}")
        else:
            typer.echo("‚ö†Ô∏è [SECURITY] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
            
    except Exception as e:
        typer.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}", err=True)
        raise typer.Exit(code=3)

# –ì—Ä—É–ø–ø–∞ –∫–æ–º–∞–Ω–¥ config
config_app = typer.Typer()
app.add_typer(config_app, name="config", help="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")

@config_app.command("set")
def config_set(
    ctx: typer.Context,
    key: str = typer.Argument(..., help="–ö–ª—é—á –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"),
    value: str = typer.Argument(..., help="–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"),
):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    –ü—Ä–∏–º–µ—Ä:
      apex config set default_manifest ./configs/manifest.json
    """
    valid_keys = ["default_manifest", "log_level", "max_file_size"]
    if key not in valid_keys:
        typer.echo(f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–ª—é—á: {key}", err=True)
        typer.echo(f"‚úÖ –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–ª—é—á–∏: {', '.join(valid_keys)}")
        raise typer.Exit(code=1)
    
    ctx.obj.config[key] = value
    ctx.obj.save_config()
    typer.echo(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä '{key}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ '{value}'")

@config_app.command("get")
def config_get(
    ctx: typer.Context,
    key: str = typer.Argument(..., help="–ö–ª—é—á –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"),
):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    
    –ü—Ä–∏–º–µ—Ä:
      apex config get log_level
    """
    value = ctx.obj.config.get(key, "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    typer.echo(f"{key} = {value}")

@config_app.command("list")
def config_list(ctx: typer.Context):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    –ü—Ä–∏–º–µ—Ä:
      apex config list
    """
    for key, value in ctx.obj.config.items():
        typer.echo(f"{key} = {value}")

# –ì—Ä—É–ø–ø–∞ –∫–æ–º–∞–Ω–¥ manifest
manifest_app = typer.Typer()
app.add_typer(manifest_app, name="manifest", help="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏")

@manifest_app.command("show")
def manifest_show(ctx: typer.Context):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç
    
    –ü—Ä–∏–º–µ—Ä:
      apex manifest show
    """
    manifest_path = ctx.obj.manifest or ctx.obj.config.get("default_manifest") or "manifests/default.json"
    try:
        with open(manifest_path, 'r') as f:
            content = f.read()
            typer.echo(content)
    except Exception as e:
        typer.echo(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}", err=True)
        raise typer.Exit(code=4)

@manifest_app.command("validate")
def manifest_validate(
    ctx: typer.Context,
    file: str = typer.Argument(..., help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞"),
):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
    
    –ü—Ä–∏–º–µ—Ä:
      apex manifest validate custom_rules.json
    """
    try:
        with open(file, 'r') as f:
            manifest = json.load(f)
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        required_sections = ["filesystem", "network", "gpu"]
        for section in required_sections:
            if section not in manifest:
                typer.echo(f"‚ùå [INVALID] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è: {section}", err=True)
                raise typer.Exit(code=5)
        typer.echo("üü¢ [VALID] –°–∏–Ω—Ç–∞–∫—Å–∏—Å –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
    except Exception as e:
        typer.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}", err=True)
        raise typer.Exit(code=5)

@manifest_app.command("generate")
def manifest_generate(ctx: typer.Context):
    """
    –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
    
    –ü—Ä–∏–º–µ—Ä:
      apex manifest generate > custom_manifest.json
    """
    template = {
        "skill_name": "default",
        "filesystem": {
            "read": ["/safe/path/*"],
            "write": ["/output/dir/"],
            "delete": []
        },
        "network": True,
        "gpu": False,
        "sensors": False,
        "camera": False
    }
    typer.echo(json.dumps(template, indent=2))

# –ì—Ä—É–ø–ø–∞ –∫–æ–º–∞–Ω–¥ system
system_app = typer.Typer()
app.add_typer(system_app, name="system", help="–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")

@system_app.command("status")
def system_status(ctx: typer.Context):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    
    –ü—Ä–∏–º–µ—Ä:
      apex system status
    """
    status = {
        "core": "active",
        "security": "enabled",
        "network": "available",
        "storage": f"{shutil.disk_usage('/').free / 1024**3:.1f} GB —Å–≤–æ–±–æ–¥–Ω–æ"
    }
    for component, state in status.items():
        typer.echo(f"{component}: {state}")

@system_app.command("clean")
def system_clean(ctx: typer.Context):
    """
    –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    
    –ü—Ä–∏–º–µ—Ä:
      apex system clean
    """
    cache_dir = os.path.expanduser("~/.apex/cache")
    try:
        os.makedirs(cache_dir, exist_ok=True)
        count = 0
        for file in os.listdir(cache_dir):
            file_path = os.path.join(cache_dir, file)
            if os.path.isfile(file_path):
                os.remove(file_path)
                count += 1
        typer.echo(f"‚úÖ –û—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {count} –≤ {cache_dir}")
    except Exception as e:
        typer.echo(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}", err=True)
        raise typer.Exit(code=6)

@system_app.command("logs")
def system_logs(
    ctx: typer.Context,
    tail: int = typer.Option(20, "--tail", help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫"),
):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
    
    –ü—Ä–∏–º–µ—Ä:
      apex system logs
      apex system logs --tail 50
    """
    try:
        if not os.path.exists(ctx.obj.log_path):
            typer.echo("–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        with open(ctx.obj.log_path, 'r') as f:
            lines = f.readlines()[-tail:]
            typer.echo("".join(lines))
    except Exception as e:
        typer.echo(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}", err=True)
        raise typer.Exit(code=7)

if __name__ == "__main__":
    app()